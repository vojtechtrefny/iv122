def read_file(fname):
    string = ""
    with open("cv9/" + fname, "r") as f:
        for line in f:
            string += line

    string = string.replace(" ", "")[:-1]

    return string


def frequency(string):
    res = {}

    for char in string:
        if char not in res.keys():
            res[char] = 1
        else:
            res[char] += 1

    return res


def chi_squared(string):
    # https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test
    measured = frequency(string)
    expected = len(string) / 6

    return sum([((measured[i] - expected)**2 / expected) for i in measured.keys()])


def pattern_repeating(string):

    for i in range(2, len(string) // 2):  # substring lenght from 2 to half string length
        for j in range(1, len(string) - i):  # form all substrings of lenght i
            substring = string[j: j + i]
            cnt = string.count(substring)  # count number of substrigs in string

            if cnt * i >= (len(string) // 2):  # repeating pattern takes more than 50 % of the string
                return (substring, cnt)

    return ("", 0)


for i in range(1, 8):
    string = read_file("random%d.txt" % i)
    print(frequency(string))
    print(chi_squared(string))
    print(pattern_repeating(string))

# RESULTS:
# {'1': 833, '3': 833, '6': 833, '2': 834, '5': 833, '4': 834}
# 0.0015999999999999999
# ('', 0)
# {'1': 856, '3': 829, '6': 798, '2': 428, '5': 1244, '4': 845}
# 401.8312
# ('', 0)
# {'5': 821, '3': 850, '6': 850, '2': 836, '1': 819, '4': 824}
# 1.2088
# ('', 0)
# {'5': 819, '3': 829, '6': 823, '2': 827, '1': 852, '4': 850}
# 1.1968
# ('', 0)
# {'5': 842, '3': 812, '6': 859, '2': 836, '1': 808, '4': 843}
# 2.3175999999999997
# ('53416', 514)
# {'1': 849, '3': 849, '6': 802, '2': 851, '5': 803, '4': 846}
# 3.4383999999999997
# ('263351312255621626365641541521666445336432123351613652', 47)
# {'5': 833, '3': 823, '6': 830, '2': 842, '1': 838, '4': 834}
# 0.2584
# ('31415323132612515146525264364565363552264644512533461216125422111535162255224113412145655326461655136425544516242422262434122561641621512252465141266416646624613122332543116153112443151452342252553146634424665132345611525362362433311511312416461126226562466621254155626314161446234411263616524425423651523432325414251146641523513324451112251144156431265536651344543532254325124215536526355566611143312551351156441416313121352555431613522356433556415666635344142642455452156245251234646351516443565444641331565623545134134565461551122652531541233166362241363215361422344631536622322143233352316542215263424511634512614566343646533124252626136263653615634341144521333354661521323554124121521653341531662311422263542454161211136566434536563346115534235316452325343162663126412566161633232112214653541513112532156316356211561412523661423325626216162513226452254244125142665465243243152263333611164256156652253533134313454255216664514453544226235363342422651651552554626122153645323423236421235555356113562644525642315552236523343326546253111633161123131132426511455613216341411624111121166541135161544233344261635533151223244342124666612434351665542456652213444455333263111552612646216621423243631133241461224224336363646263512516561425632515115436221442', 2)
